// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.System.IO.Compression.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string ArgumentOutOfRange_Enum {
              get { return SR.GetResourceString("ArgumentOutOfRange_Enum", null); }
        }
        internal static string ArgumentOutOfRange_NeedPosNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedPosNum", null); }
        }
        internal static string CannotReadFromDeflateStream {
              get { return SR.GetResourceString("CannotReadFromDeflateStream", null); }
        }
        internal static string CannotWriteToDeflateStream {
              get { return SR.GetResourceString("CannotWriteToDeflateStream", null); }
        }
        internal static string GenericInvalidData {
              get { return SR.GetResourceString("GenericInvalidData", null); }
        }
        internal static string InvalidArgumentOffsetCount {
              get { return SR.GetResourceString("InvalidArgumentOffsetCount", null); }
        }
        internal static string InvalidBeginCall {
              get { return SR.GetResourceString("InvalidBeginCall", null); }
        }
        internal static string InvalidBlockLength {
              get { return SR.GetResourceString("InvalidBlockLength", null); }
        }
        internal static string InvalidHuffmanData {
              get { return SR.GetResourceString("InvalidHuffmanData", null); }
        }
        internal static string NotSupported {
              get { return SR.GetResourceString("NotSupported", null); }
        }
        internal static string NotSupported_UnreadableStream {
              get { return SR.GetResourceString("NotSupported_UnreadableStream", null); }
        }
        internal static string NotSupported_UnwritableStream {
              get { return SR.GetResourceString("NotSupported_UnwritableStream", null); }
        }
        internal static string ObjectDisposed_StreamClosed {
              get { return SR.GetResourceString("ObjectDisposed_StreamClosed", null); }
        }
        internal static string UnknownBlockType {
              get { return SR.GetResourceString("UnknownBlockType", null); }
        }
        internal static string UnknownState {
              get { return SR.GetResourceString("UnknownState", null); }
        }
        internal static string ZLibErrorDLLLoadError {
              get { return SR.GetResourceString("ZLibErrorDLLLoadError", null); }
        }
        internal static string ZLibErrorInconsistentStream {
              get { return SR.GetResourceString("ZLibErrorInconsistentStream", null); }
        }
        internal static string ZLibErrorIncorrectInitParameters {
              get { return SR.GetResourceString("ZLibErrorIncorrectInitParameters", null); }
        }
        internal static string ZLibErrorNotEnoughMemory {
              get { return SR.GetResourceString("ZLibErrorNotEnoughMemory", null); }
        }
        internal static string ZLibErrorVersionMismatch {
              get { return SR.GetResourceString("ZLibErrorVersionMismatch", null); }
        }
        internal static string ZLibErrorUnexpected {
              get { return SR.GetResourceString("ZLibErrorUnexpected", null); }
        }
        internal static string ArgumentNeedNonNegative {
              get { return SR.GetResourceString("ArgumentNeedNonNegative", null); }
        }
        internal static string CannotBeEmpty {
              get { return SR.GetResourceString("CannotBeEmpty", null); }
        }
        internal static string CDCorrupt {
              get { return SR.GetResourceString("CDCorrupt", null); }
        }
        internal static string CentralDirectoryInvalid {
              get { return SR.GetResourceString("CentralDirectoryInvalid", null); }
        }
        internal static string CreateInReadMode {
              get { return SR.GetResourceString("CreateInReadMode", null); }
        }
        internal static string CreateModeCapabilities {
              get { return SR.GetResourceString("CreateModeCapabilities", null); }
        }
        internal static string CreateModeCreateEntryWhileOpen {
              get { return SR.GetResourceString("CreateModeCreateEntryWhileOpen", null); }
        }
        internal static string CreateModeWriteOnceAndOneEntryAtATime {
              get { return SR.GetResourceString("CreateModeWriteOnceAndOneEntryAtATime", null); }
        }
        internal static string DateTimeOutOfRange {
              get { return SR.GetResourceString("DateTimeOutOfRange", null); }
        }
        internal static string DeletedEntry {
              get { return SR.GetResourceString("DeletedEntry", null); }
        }
        internal static string DeleteOnlyInUpdate {
              get { return SR.GetResourceString("DeleteOnlyInUpdate", null); }
        }
        internal static string DeleteOpenEntry {
              get { return SR.GetResourceString("DeleteOpenEntry", null); }
        }
        internal static string EntriesInCreateMode {
              get { return SR.GetResourceString("EntriesInCreateMode", null); }
        }
        internal static string EntryNameEncodingNotSupported {
              get { return SR.GetResourceString("EntryNameEncodingNotSupported", null); }
        }
        internal static string EntryNamesTooLong {
              get { return SR.GetResourceString("EntryNamesTooLong", null); }
        }
        internal static string EntryTooLarge {
              get { return SR.GetResourceString("EntryTooLarge", null); }
        }
        internal static string EOCDNotFound {
              get { return SR.GetResourceString("EOCDNotFound", null); }
        }
        internal static string FieldTooBigCompressedSize {
              get { return SR.GetResourceString("FieldTooBigCompressedSize", null); }
        }
        internal static string FieldTooBigLocalHeaderOffset {
              get { return SR.GetResourceString("FieldTooBigLocalHeaderOffset", null); }
        }
        internal static string FieldTooBigNumEntries {
              get { return SR.GetResourceString("FieldTooBigNumEntries", null); }
        }
        internal static string FieldTooBigOffsetToCD {
              get { return SR.GetResourceString("FieldTooBigOffsetToCD", null); }
        }
        internal static string FieldTooBigOffsetToZip64EOCD {
              get { return SR.GetResourceString("FieldTooBigOffsetToZip64EOCD", null); }
        }
        internal static string FieldTooBigStartDiskNumber {
              get { return SR.GetResourceString("FieldTooBigStartDiskNumber", null); }
        }
        internal static string FieldTooBigUncompressedSize {
              get { return SR.GetResourceString("FieldTooBigUncompressedSize", null); }
        }
        internal static string FrozenAfterWrite {
              get { return SR.GetResourceString("FrozenAfterWrite", null); }
        }
        internal static string HiddenStreamName {
              get { return SR.GetResourceString("HiddenStreamName", null); }
        }
        internal static string LengthAfterWrite {
              get { return SR.GetResourceString("LengthAfterWrite", null); }
        }
        internal static string LocalFileHeaderCorrupt {
              get { return SR.GetResourceString("LocalFileHeaderCorrupt", null); }
        }
        internal static string NumEntriesWrong {
              get { return SR.GetResourceString("NumEntriesWrong", null); }
        }
        internal static string OffsetLengthInvalid {
              get { return SR.GetResourceString("OffsetLengthInvalid", null); }
        }
        internal static string ReadingNotSupported {
              get { return SR.GetResourceString("ReadingNotSupported", null); }
        }
        internal static string ReadModeCapabilities {
              get { return SR.GetResourceString("ReadModeCapabilities", null); }
        }
        internal static string ReadOnlyArchive {
              get { return SR.GetResourceString("ReadOnlyArchive", null); }
        }
        internal static string SeekingNotSupported {
              get { return SR.GetResourceString("SeekingNotSupported", null); }
        }
        internal static string SetLengthRequiresSeekingAndWriting {
              get { return SR.GetResourceString("SetLengthRequiresSeekingAndWriting", null); }
        }
        internal static string SplitSpanned {
              get { return SR.GetResourceString("SplitSpanned", null); }
        }
        internal static string UnexpectedEndOfStream {
              get { return SR.GetResourceString("UnexpectedEndOfStream", null); }
        }
        internal static string UnsupportedCompression {
              get { return SR.GetResourceString("UnsupportedCompression", null); }
        }
        internal static string UnsupportedCompressionMethod {
              get { return SR.GetResourceString("UnsupportedCompressionMethod", null); }
        }
        internal static string UpdateModeCapabilities {
              get { return SR.GetResourceString("UpdateModeCapabilities", null); }
        }
        internal static string UpdateModeOneStream {
              get { return SR.GetResourceString("UpdateModeOneStream", null); }
        }
        internal static string WritingNotSupported {
              get { return SR.GetResourceString("WritingNotSupported", null); }
        }
        internal static string Zip64EOCDNotWhereExpected {
              get { return SR.GetResourceString("Zip64EOCDNotWhereExpected", null); }
        }
        internal static string Argument_InvalidPathChars {
              get { return SR.GetResourceString("Argument_InvalidPathChars", null); }
        }
#else
        internal static string ArgumentOutOfRange_Enum {
              get { return SR.GetResourceString("ArgumentOutOfRange_Enum", @"Enum value was out of legal range."); }
        }
        internal static string ArgumentOutOfRange_NeedPosNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedPosNum", @"Positive number required."); }
        }
        internal static string CannotReadFromDeflateStream {
              get { return SR.GetResourceString("CannotReadFromDeflateStream", @"Reading from the compression stream is not supported."); }
        }
        internal static string CannotWriteToDeflateStream {
              get { return SR.GetResourceString("CannotWriteToDeflateStream", @"Writing to the compression stream is not supported."); }
        }
        internal static string GenericInvalidData {
              get { return SR.GetResourceString("GenericInvalidData", @"Found invalid data while decoding."); }
        }
        internal static string InvalidArgumentOffsetCount {
              get { return SR.GetResourceString("InvalidArgumentOffsetCount", @"Offset plus count is larger than the length of target array."); }
        }
        internal static string InvalidBeginCall {
              get { return SR.GetResourceString("InvalidBeginCall", @"Only one asynchronous reader or writer is allowed time at one time."); }
        }
        internal static string InvalidBlockLength {
              get { return SR.GetResourceString("InvalidBlockLength", @"Block length does not match with its complement."); }
        }
        internal static string InvalidHuffmanData {
              get { return SR.GetResourceString("InvalidHuffmanData", @"Failed to construct a huffman tree using the length array. The stream might be corrupted."); }
        }
        internal static string NotSupported {
              get { return SR.GetResourceString("NotSupported", @"This operation is not supported."); }
        }
        internal static string NotSupported_UnreadableStream {
              get { return SR.GetResourceString("NotSupported_UnreadableStream", @"Stream does not support reading."); }
        }
        internal static string NotSupported_UnwritableStream {
              get { return SR.GetResourceString("NotSupported_UnwritableStream", @"Stream does not support writing."); }
        }
        internal static string ObjectDisposed_StreamClosed {
              get { return SR.GetResourceString("ObjectDisposed_StreamClosed", @"Can not access a closed Stream."); }
        }
        internal static string UnknownBlockType {
              get { return SR.GetResourceString("UnknownBlockType", @"Unknown block type. Stream might be corrupted."); }
        }
        internal static string UnknownState {
              get { return SR.GetResourceString("UnknownState", @"Decoder is in some unknown state. This might be caused by corrupted data."); }
        }
        internal static string ZLibErrorDLLLoadError {
              get { return SR.GetResourceString("ZLibErrorDLLLoadError", @"The underlying compression routine could not be loaded correctly."); }
        }
        internal static string ZLibErrorInconsistentStream {
              get { return SR.GetResourceString("ZLibErrorInconsistentStream", @"The stream state of the underlying compression routine is inconsistent."); }
        }
        internal static string ZLibErrorIncorrectInitParameters {
              get { return SR.GetResourceString("ZLibErrorIncorrectInitParameters", @"The underlying compression routine received incorrect initialization parameters."); }
        }
        internal static string ZLibErrorNotEnoughMemory {
              get { return SR.GetResourceString("ZLibErrorNotEnoughMemory", @"The underlying compression routine could not reserve sufficient memory."); }
        }
        internal static string ZLibErrorVersionMismatch {
              get { return SR.GetResourceString("ZLibErrorVersionMismatch", @"The version of the underlying compression routine does not match expected version."); }
        }
        internal static string ZLibErrorUnexpected {
              get { return SR.GetResourceString("ZLibErrorUnexpected", @"The underlying compression routine returned an unexpected error code."); }
        }
        internal static string ArgumentNeedNonNegative {
              get { return SR.GetResourceString("ArgumentNeedNonNegative", @"The argument must be non-negative."); }
        }
        internal static string CannotBeEmpty {
              get { return SR.GetResourceString("CannotBeEmpty", @"String cannot be empty."); }
        }
        internal static string CDCorrupt {
              get { return SR.GetResourceString("CDCorrupt", @"Central Directory corrupt."); }
        }
        internal static string CentralDirectoryInvalid {
              get { return SR.GetResourceString("CentralDirectoryInvalid", @"Central Directory is invalid."); }
        }
        internal static string CreateInReadMode {
              get { return SR.GetResourceString("CreateInReadMode", @"Cannot create entries on an archive opened in read mode."); }
        }
        internal static string CreateModeCapabilities {
              get { return SR.GetResourceString("CreateModeCapabilities", @"Cannot use create mode on a non-writable stream."); }
        }
        internal static string CreateModeCreateEntryWhileOpen {
              get { return SR.GetResourceString("CreateModeCreateEntryWhileOpen", @"Entries cannot be created while previously created entries are still open."); }
        }
        internal static string CreateModeWriteOnceAndOneEntryAtATime {
              get { return SR.GetResourceString("CreateModeWriteOnceAndOneEntryAtATime", @"Entries in create mode may only be written to once, and only one entry may be held open at a time."); }
        }
        internal static string DateTimeOutOfRange {
              get { return SR.GetResourceString("DateTimeOutOfRange", @"The DateTimeOffset specified cannot be converted into a Zip file timestamp."); }
        }
        internal static string DeletedEntry {
              get { return SR.GetResourceString("DeletedEntry", @"Cannot modify deleted entry."); }
        }
        internal static string DeleteOnlyInUpdate {
              get { return SR.GetResourceString("DeleteOnlyInUpdate", @"Delete can only be used when the archive is in Update mode."); }
        }
        internal static string DeleteOpenEntry {
              get { return SR.GetResourceString("DeleteOpenEntry", @"Cannot delete an entry currently open for writing."); }
        }
        internal static string EntriesInCreateMode {
              get { return SR.GetResourceString("EntriesInCreateMode", @"Cannot access entries in Create mode."); }
        }
        internal static string EntryNameEncodingNotSupported {
              get { return SR.GetResourceString("EntryNameEncodingNotSupported", @"The specified entry name encoding is not supported."); }
        }
        internal static string EntryNamesTooLong {
              get { return SR.GetResourceString("EntryNamesTooLong", @"Entry names cannot require more than 2^16 bits."); }
        }
        internal static string EntryTooLarge {
              get { return SR.GetResourceString("EntryTooLarge", @"Entries larger than 4GB are not supported in Update mode."); }
        }
        internal static string EOCDNotFound {
              get { return SR.GetResourceString("EOCDNotFound", @"End of Central Directory record could not be found."); }
        }
        internal static string FieldTooBigCompressedSize {
              get { return SR.GetResourceString("FieldTooBigCompressedSize", @"Compressed Size cannot be held in an Int64."); }
        }
        internal static string FieldTooBigLocalHeaderOffset {
              get { return SR.GetResourceString("FieldTooBigLocalHeaderOffset", @"Local Header Offset cannot be held in an Int64."); }
        }
        internal static string FieldTooBigNumEntries {
              get { return SR.GetResourceString("FieldTooBigNumEntries", @"Number of Entries cannot be held in an Int64."); }
        }
        internal static string FieldTooBigOffsetToCD {
              get { return SR.GetResourceString("FieldTooBigOffsetToCD", @"Offset to Central Directory cannot be held in an Int64."); }
        }
        internal static string FieldTooBigOffsetToZip64EOCD {
              get { return SR.GetResourceString("FieldTooBigOffsetToZip64EOCD", @"Offset to Zip64 End Of Central Directory record cannot be held in an Int64."); }
        }
        internal static string FieldTooBigStartDiskNumber {
              get { return SR.GetResourceString("FieldTooBigStartDiskNumber", @"Start Disk Number cannot be held in an Int64."); }
        }
        internal static string FieldTooBigUncompressedSize {
              get { return SR.GetResourceString("FieldTooBigUncompressedSize", @"Uncompressed Size cannot be held in an Int64."); }
        }
        internal static string FrozenAfterWrite {
              get { return SR.GetResourceString("FrozenAfterWrite", @"Cannot modify entry in Create mode after entry has been opened for writing."); }
        }
        internal static string HiddenStreamName {
              get { return SR.GetResourceString("HiddenStreamName", @"A stream from ZipArchiveEntry has been disposed."); }
        }
        internal static string LengthAfterWrite {
              get { return SR.GetResourceString("LengthAfterWrite", @"Length properties are unavailable once an entry has been opened for writing."); }
        }
        internal static string LocalFileHeaderCorrupt {
              get { return SR.GetResourceString("LocalFileHeaderCorrupt", @"A local file header is corrupt."); }
        }
        internal static string NumEntriesWrong {
              get { return SR.GetResourceString("NumEntriesWrong", @"Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory."); }
        }
        internal static string OffsetLengthInvalid {
              get { return SR.GetResourceString("OffsetLengthInvalid", @"The offset and length parameters are not valid for the array that was given."); }
        }
        internal static string ReadingNotSupported {
              get { return SR.GetResourceString("ReadingNotSupported", @"This stream from ZipArchiveEntry does not support reading."); }
        }
        internal static string ReadModeCapabilities {
              get { return SR.GetResourceString("ReadModeCapabilities", @"Cannot use read mode on a non-readable stream."); }
        }
        internal static string ReadOnlyArchive {
              get { return SR.GetResourceString("ReadOnlyArchive", @"Cannot modify read-only archive."); }
        }
        internal static string SeekingNotSupported {
              get { return SR.GetResourceString("SeekingNotSupported", @"This stream from ZipArchiveEntry does not support seeking."); }
        }
        internal static string SetLengthRequiresSeekingAndWriting {
              get { return SR.GetResourceString("SetLengthRequiresSeekingAndWriting", @"SetLength requires a stream that supports seeking and writing."); }
        }
        internal static string SplitSpanned {
              get { return SR.GetResourceString("SplitSpanned", @"Split or spanned archives are not supported."); }
        }
        internal static string UnexpectedEndOfStream {
              get { return SR.GetResourceString("UnexpectedEndOfStream", @"Zip file corrupt: unexpected end of stream reached."); }
        }
        internal static string UnsupportedCompression {
              get { return SR.GetResourceString("UnsupportedCompression", @"The archive entry was compressed using an unsupported compression method."); }
        }
        internal static string UnsupportedCompressionMethod {
              get { return SR.GetResourceString("UnsupportedCompressionMethod", @"The archive entry was compressed using {0} and is not supported."); }
        }
        internal static string UpdateModeCapabilities {
              get { return SR.GetResourceString("UpdateModeCapabilities", @"Update mode requires a stream with read, write, and seek capabilities."); }
        }
        internal static string UpdateModeOneStream {
              get { return SR.GetResourceString("UpdateModeOneStream", @"Entries cannot be opened multiple times in Update mode."); }
        }
        internal static string WritingNotSupported {
              get { return SR.GetResourceString("WritingNotSupported", @"This stream from ZipArchiveEntry does not support writing."); }
        }
        internal static string Zip64EOCDNotWhereExpected {
              get { return SR.GetResourceString("Zip64EOCDNotWhereExpected", @"Zip 64 End of Central Directory Record not where indicated."); }
        }
        internal static string Argument_InvalidPathChars {
              get { return SR.GetResourceString("Argument_InvalidPathChars", @"Illegal characters in path."); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.System.IO.Compression.SR); }
        }
    }
}
namespace FxResources.System.IO.Compression
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}
