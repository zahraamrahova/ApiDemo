// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.System.Security.Cryptography.Algorithms.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", null); }
        }
        internal static string ArgumentOutOfRange_NeedPosNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedPosNum", null); }
        }
        internal static string Argument_InvalidOffLen {
              get { return SR.GetResourceString("Argument_InvalidOffLen", null); }
        }
        internal static string Argument_InvalidOidValue {
              get { return SR.GetResourceString("Argument_InvalidOidValue", null); }
        }
        internal static string Argument_InvalidValue {
              get { return SR.GetResourceString("Argument_InvalidValue", null); }
        }
        internal static string ArgumentNull_Buffer {
              get { return SR.GetResourceString("ArgumentNull_Buffer", null); }
        }
        internal static string Arg_CryptographyException {
              get { return SR.GetResourceString("Arg_CryptographyException", null); }
        }
        internal static string Cryptography_BadHashSize_ForAlgorithm {
              get { return SR.GetResourceString("Cryptography_BadHashSize_ForAlgorithm", null); }
        }
        internal static string Cryptography_Config_EncodedOIDError {
              get { return SR.GetResourceString("Cryptography_Config_EncodedOIDError", null); }
        }
        internal static string Cryptography_CSP_NoPrivateKey {
              get { return SR.GetResourceString("Cryptography_CSP_NoPrivateKey", null); }
        }
        internal static string Cryptography_Der_Invalid_Encoding {
              get { return SR.GetResourceString("Cryptography_Der_Invalid_Encoding", null); }
        }
        internal static string Cryptography_DSA_KeyGenNotSupported {
              get { return SR.GetResourceString("Cryptography_DSA_KeyGenNotSupported", null); }
        }
        internal static string Cryptography_ECXmlSerializationFormatRequired {
              get { return SR.GetResourceString("Cryptography_ECXmlSerializationFormatRequired", null); }
        }
        internal static string Cryptography_ECC_NamedCurvesOnly {
              get { return SR.GetResourceString("Cryptography_ECC_NamedCurvesOnly", null); }
        }
        internal static string Cryptography_HashAlgorithmNameNullOrEmpty {
              get { return SR.GetResourceString("Cryptography_HashAlgorithmNameNullOrEmpty", null); }
        }
        internal static string Cryptography_InvalidOID {
              get { return SR.GetResourceString("Cryptography_InvalidOID", null); }
        }
        internal static string Cryptography_CurveNotSupported {
              get { return SR.GetResourceString("Cryptography_CurveNotSupported", null); }
        }
        internal static string Cryptography_InvalidCurveOid {
              get { return SR.GetResourceString("Cryptography_InvalidCurveOid", null); }
        }
        internal static string Cryptography_InvalidCurveKeyParameters {
              get { return SR.GetResourceString("Cryptography_InvalidCurveKeyParameters", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_MissingFields {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MissingFields", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedPGY {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPGY", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedQX {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedQX", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedPJ {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPJ", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_QRestriction_ShortKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_ShortKey", null); }
        }
        internal static string Cryptography_InvalidDsaParameters_QRestriction_LargeKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_LargeKey", null); }
        }
        internal static string Cryptography_InvalidECCharacteristic2Curve {
              get { return SR.GetResourceString("Cryptography_InvalidECCharacteristic2Curve", null); }
        }
        internal static string Cryptography_InvalidECPrimeCurve {
              get { return SR.GetResourceString("Cryptography_InvalidECPrimeCurve", null); }
        }
        internal static string Cryptography_InvalidECNamedCurve {
              get { return SR.GetResourceString("Cryptography_InvalidECNamedCurve", null); }
        }
        internal static string Cryptography_InvalidKeySize {
              get { return SR.GetResourceString("Cryptography_InvalidKeySize", null); }
        }
        internal static string Cryptography_InvalidKey_SemiWeak {
              get { return SR.GetResourceString("Cryptography_InvalidKey_SemiWeak", null); }
        }
        internal static string Cryptography_InvalidKey_Weak {
              get { return SR.GetResourceString("Cryptography_InvalidKey_Weak", null); }
        }
        internal static string Cryptography_InvalidIVSize {
              get { return SR.GetResourceString("Cryptography_InvalidIVSize", null); }
        }
        internal static string Cryptography_InvalidOperation {
              get { return SR.GetResourceString("Cryptography_InvalidOperation", null); }
        }
        internal static string Cryptography_InvalidPadding {
              get { return SR.GetResourceString("Cryptography_InvalidPadding", null); }
        }
        internal static string Cryptography_InvalidRsaParameters {
              get { return SR.GetResourceString("Cryptography_InvalidRsaParameters", null); }
        }
        internal static string Cryptography_InvalidPaddingMode {
              get { return SR.GetResourceString("Cryptography_InvalidPaddingMode", null); }
        }
        internal static string Cryptography_Invalid_IA5String {
              get { return SR.GetResourceString("Cryptography_Invalid_IA5String", null); }
        }
        internal static string Cryptography_MissingIV {
              get { return SR.GetResourceString("Cryptography_MissingIV", null); }
        }
        internal static string Cryptography_MissingKey {
              get { return SR.GetResourceString("Cryptography_MissingKey", null); }
        }
        internal static string Cryptography_MissingOID {
              get { return SR.GetResourceString("Cryptography_MissingOID", null); }
        }
        internal static string Cryptography_MustTransformWholeBlock {
              get { return SR.GetResourceString("Cryptography_MustTransformWholeBlock", null); }
        }
        internal static string Cryptography_NotValidPrivateKey {
              get { return SR.GetResourceString("Cryptography_NotValidPrivateKey", null); }
        }
        internal static string Cryptography_NotValidPublicOrPrivateKey {
              get { return SR.GetResourceString("Cryptography_NotValidPublicOrPrivateKey", null); }
        }
        internal static string Cryptography_OpenInvalidHandle {
              get { return SR.GetResourceString("Cryptography_OpenInvalidHandle", null); }
        }
        internal static string Cryptography_PartialBlock {
              get { return SR.GetResourceString("Cryptography_PartialBlock", null); }
        }
        internal static string Cryptography_PasswordDerivedBytes_FewBytesSalt {
              get { return SR.GetResourceString("Cryptography_PasswordDerivedBytes_FewBytesSalt", null); }
        }
        internal static string Cryptography_RC2_EKS40 {
              get { return SR.GetResourceString("Cryptography_RC2_EKS40", null); }
        }
        internal static string Cryptography_RC2_EKSKS {
              get { return SR.GetResourceString("Cryptography_RC2_EKSKS", null); }
        }
        internal static string Cryptography_RC2_EKSKS2 {
              get { return SR.GetResourceString("Cryptography_RC2_EKSKS2", null); }
        }
        internal static string Cryptography_Rijndael_BlockSize {
              get { return SR.GetResourceString("Cryptography_Rijndael_BlockSize", null); }
        }
        internal static string Cryptography_TransformBeyondEndOfBuffer {
              get { return SR.GetResourceString("Cryptography_TransformBeyondEndOfBuffer", null); }
        }
        internal static string Cryptography_CipherModeNotSupported {
              get { return SR.GetResourceString("Cryptography_CipherModeNotSupported", null); }
        }
        internal static string Cryptography_UnknownHashAlgorithm {
              get { return SR.GetResourceString("Cryptography_UnknownHashAlgorithm", null); }
        }
        internal static string Cryptography_UnknownPaddingMode {
              get { return SR.GetResourceString("Cryptography_UnknownPaddingMode", null); }
        }
        internal static string Cryptography_UnexpectedTransformTruncation {
              get { return SR.GetResourceString("Cryptography_UnexpectedTransformTruncation", null); }
        }
        internal static string Cryptography_Unmapped_System_Typed_Error {
              get { return SR.GetResourceString("Cryptography_Unmapped_System_Typed_Error", null); }
        }
        internal static string Cryptography_UnsupportedPaddingMode {
              get { return SR.GetResourceString("Cryptography_UnsupportedPaddingMode", null); }
        }
        internal static string NotSupported_Method {
              get { return SR.GetResourceString("NotSupported_Method", null); }
        }
        internal static string NotSupported_SubclassOverride {
              get { return SR.GetResourceString("NotSupported_SubclassOverride", null); }
        }
#else
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", @"Non-negative number required."); }
        }
        internal static string ArgumentOutOfRange_NeedPosNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedPosNum", @"Positive number required."); }
        }
        internal static string Argument_InvalidOffLen {
              get { return SR.GetResourceString("Argument_InvalidOffLen", @"Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."); }
        }
        internal static string Argument_InvalidOidValue {
              get { return SR.GetResourceString("Argument_InvalidOidValue", @"The OID value was invalid."); }
        }
        internal static string Argument_InvalidValue {
              get { return SR.GetResourceString("Argument_InvalidValue", @"Value was invalid."); }
        }
        internal static string ArgumentNull_Buffer {
              get { return SR.GetResourceString("ArgumentNull_Buffer", @"Buffer cannot be null."); }
        }
        internal static string Arg_CryptographyException {
              get { return SR.GetResourceString("Arg_CryptographyException", @"Error occurred during a cryptographic operation."); }
        }
        internal static string Cryptography_BadHashSize_ForAlgorithm {
              get { return SR.GetResourceString("Cryptography_BadHashSize_ForAlgorithm", @"The provided value of {0} bytes does not match the expected size of {1} bytes for the algorithm ({2})."); }
        }
        internal static string Cryptography_Config_EncodedOIDError {
              get { return SR.GetResourceString("Cryptography_Config_EncodedOIDError", @"Encoded OID length is too large (greater than 0x7f bytes)."); }
        }
        internal static string Cryptography_CSP_NoPrivateKey {
              get { return SR.GetResourceString("Cryptography_CSP_NoPrivateKey", @"Object contains only the public half of a key pair. A private key must also be provided."); }
        }
        internal static string Cryptography_Der_Invalid_Encoding {
              get { return SR.GetResourceString("Cryptography_Der_Invalid_Encoding", @"ASN1 corrupted data."); }
        }
        internal static string Cryptography_DSA_KeyGenNotSupported {
              get { return SR.GetResourceString("Cryptography_DSA_KeyGenNotSupported", @"DSA keys can be imported, but new key generation is not supported on this platform."); }
        }
        internal static string Cryptography_ECXmlSerializationFormatRequired {
              get { return SR.GetResourceString("Cryptography_ECXmlSerializationFormatRequired", @"XML serialization of an elliptic curve key requires using an overload which specifies the XML format to be used."); }
        }
        internal static string Cryptography_ECC_NamedCurvesOnly {
              get { return SR.GetResourceString("Cryptography_ECC_NamedCurvesOnly", @"Only named curves are supported on this platform."); }
        }
        internal static string Cryptography_HashAlgorithmNameNullOrEmpty {
              get { return SR.GetResourceString("Cryptography_HashAlgorithmNameNullOrEmpty", @"The hash algorithm name cannot be null or empty."); }
        }
        internal static string Cryptography_InvalidOID {
              get { return SR.GetResourceString("Cryptography_InvalidOID", @"Object identifier (OID) is unknown."); }
        }
        internal static string Cryptography_CurveNotSupported {
              get { return SR.GetResourceString("Cryptography_CurveNotSupported", @"The specified curve '{0}' or its parameters are not valid for this platform."); }
        }
        internal static string Cryptography_InvalidCurveOid {
              get { return SR.GetResourceString("Cryptography_InvalidCurveOid", @"The specified Oid is not valid. The Oid.FriendlyName or Oid.Value property must be set."); }
        }
        internal static string Cryptography_InvalidCurveKeyParameters {
              get { return SR.GetResourceString("Cryptography_InvalidCurveKeyParameters", @"The specified key parameters are not valid. Q.X and Q.Y are required fields. Q.X, Q.Y must be the same length. If D is specified it must be the same length as Q.X and Q.Y for named curves or the same length as Order for explicit curves."); }
        }
        internal static string Cryptography_InvalidDsaParameters_MissingFields {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MissingFields", @"The specified DSA parameters are not valid; P, Q, G and Y are all required."); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedPGY {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPGY", @"The specified DSA parameters are not valid; P, G and Y must be the same length (the key size)."); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedQX {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedQX", @"The specified DSA parameters are not valid; Q and X (if present) must be the same length."); }
        }
        internal static string Cryptography_InvalidDsaParameters_MismatchedPJ {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPJ", @"The specified DSA parameters are not valid; J (if present) must be shorter than P."); }
        }
        internal static string Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey", @"The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits."); }
        }
        internal static string Cryptography_InvalidDsaParameters_QRestriction_ShortKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_ShortKey", @"The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits."); }
        }
        internal static string Cryptography_InvalidDsaParameters_QRestriction_LargeKey {
              get { return SR.GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_LargeKey", @"The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes."); }
        }
        internal static string Cryptography_InvalidECCharacteristic2Curve {
              get { return SR.GetResourceString("Cryptography_InvalidECCharacteristic2Curve", @"The specified Characteristic2 curve parameters are not valid. Polynomial, A, B, G.X, G.Y, and Order are required. A, B, G.X, G.Y must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Other parameters are not allowed."); }
        }
        internal static string Cryptography_InvalidECPrimeCurve {
              get { return SR.GetResourceString("Cryptography_InvalidECPrimeCurve", @"The specified prime curve parameters are not valid. Prime, A, B, G.X, G.Y and Order are required and must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Other parameters are not allowed."); }
        }
        internal static string Cryptography_InvalidECNamedCurve {
              get { return SR.GetResourceString("Cryptography_InvalidECNamedCurve", @"The specified named curve parameters are not valid. Only the Oid parameter must be set."); }
        }
        internal static string Cryptography_InvalidKeySize {
              get { return SR.GetResourceString("Cryptography_InvalidKeySize", @"Specified key is not a valid size for this algorithm."); }
        }
        internal static string Cryptography_InvalidKey_SemiWeak {
              get { return SR.GetResourceString("Cryptography_InvalidKey_SemiWeak", @"Specified key is a known semi-weak key for '{0}' and cannot be used."); }
        }
        internal static string Cryptography_InvalidKey_Weak {
              get { return SR.GetResourceString("Cryptography_InvalidKey_Weak", @"Specified key is a known weak key for '{0}' and cannot be used."); }
        }
        internal static string Cryptography_InvalidIVSize {
              get { return SR.GetResourceString("Cryptography_InvalidIVSize", @"Specified initialization vector (IV) does not match the block size for this algorithm."); }
        }
        internal static string Cryptography_InvalidOperation {
              get { return SR.GetResourceString("Cryptography_InvalidOperation", @"This operation is not supported for this class."); }
        }
        internal static string Cryptography_InvalidPadding {
              get { return SR.GetResourceString("Cryptography_InvalidPadding", @"Specified padding mode is not valid for this algorithm."); }
        }
        internal static string Cryptography_InvalidRsaParameters {
              get { return SR.GetResourceString("Cryptography_InvalidRsaParameters", @"The specified RSA parameters are not valid; both Exponent and Modulus are required fields."); }
        }
        internal static string Cryptography_InvalidPaddingMode {
              get { return SR.GetResourceString("Cryptography_InvalidPaddingMode", @"Specified padding mode is not valid for this algorithm."); }
        }
        internal static string Cryptography_Invalid_IA5String {
              get { return SR.GetResourceString("Cryptography_Invalid_IA5String", @"The string contains a character not in the 7 bit ASCII character set."); }
        }
        internal static string Cryptography_MissingIV {
              get { return SR.GetResourceString("Cryptography_MissingIV", @"The cipher mode specified requires that an initialization vector (IV) be used."); }
        }
        internal static string Cryptography_MissingKey {
              get { return SR.GetResourceString("Cryptography_MissingKey", @"No asymmetric key object has been associated with this formatter object."); }
        }
        internal static string Cryptography_MissingOID {
              get { return SR.GetResourceString("Cryptography_MissingOID", @"Required object identifier (OID) cannot be found."); }
        }
        internal static string Cryptography_MustTransformWholeBlock {
              get { return SR.GetResourceString("Cryptography_MustTransformWholeBlock", @"TransformBlock may only process bytes in block sized increments."); }
        }
        internal static string Cryptography_NotValidPrivateKey {
              get { return SR.GetResourceString("Cryptography_NotValidPrivateKey", @"Key is not a valid private key."); }
        }
        internal static string Cryptography_NotValidPublicOrPrivateKey {
              get { return SR.GetResourceString("Cryptography_NotValidPublicOrPrivateKey", @"Key is not a valid public or private key."); }
        }
        internal static string Cryptography_OpenInvalidHandle {
              get { return SR.GetResourceString("Cryptography_OpenInvalidHandle", @"Cannot open an invalid handle."); }
        }
        internal static string Cryptography_PartialBlock {
              get { return SR.GetResourceString("Cryptography_PartialBlock", @"The input data is not a complete block."); }
        }
        internal static string Cryptography_PasswordDerivedBytes_FewBytesSalt {
              get { return SR.GetResourceString("Cryptography_PasswordDerivedBytes_FewBytesSalt", @"Salt is not at least eight bytes."); }
        }
        internal static string Cryptography_RC2_EKS40 {
              get { return SR.GetResourceString("Cryptography_RC2_EKS40", @"EffectiveKeySize value must be at least 40 bits."); }
        }
        internal static string Cryptography_RC2_EKSKS {
              get { return SR.GetResourceString("Cryptography_RC2_EKSKS", @"KeySize value must be at least as large as the EffectiveKeySize value."); }
        }
        internal static string Cryptography_RC2_EKSKS2 {
              get { return SR.GetResourceString("Cryptography_RC2_EKSKS2", @"EffectiveKeySize must be the same as KeySize in this implementation."); }
        }
        internal static string Cryptography_Rijndael_BlockSize {
              get { return SR.GetResourceString("Cryptography_Rijndael_BlockSize", @"BlockSize must be 128 in this implementation."); }
        }
        internal static string Cryptography_TransformBeyondEndOfBuffer {
              get { return SR.GetResourceString("Cryptography_TransformBeyondEndOfBuffer", @"Attempt to transform beyond end of buffer."); }
        }
        internal static string Cryptography_CipherModeNotSupported {
              get { return SR.GetResourceString("Cryptography_CipherModeNotSupported", @"The specified CipherMode '{0}' is not supported."); }
        }
        internal static string Cryptography_UnknownHashAlgorithm {
              get { return SR.GetResourceString("Cryptography_UnknownHashAlgorithm", @"'{0}' is not a known hash algorithm."); }
        }
        internal static string Cryptography_UnknownPaddingMode {
              get { return SR.GetResourceString("Cryptography_UnknownPaddingMode", @"Unknown padding mode used."); }
        }
        internal static string Cryptography_UnexpectedTransformTruncation {
              get { return SR.GetResourceString("Cryptography_UnexpectedTransformTruncation", @"CNG provider unexpectedly terminated encryption or decryption prematurely."); }
        }
        internal static string Cryptography_Unmapped_System_Typed_Error {
              get { return SR.GetResourceString("Cryptography_Unmapped_System_Typed_Error", @"The system cryptographic library returned error '{0}' of type '{1}'"); }
        }
        internal static string Cryptography_UnsupportedPaddingMode {
              get { return SR.GetResourceString("Cryptography_UnsupportedPaddingMode", @"The specified PaddingMode is not supported."); }
        }
        internal static string NotSupported_Method {
              get { return SR.GetResourceString("NotSupported_Method", @"Method not supported."); }
        }
        internal static string NotSupported_SubclassOverride {
              get { return SR.GetResourceString("NotSupported_SubclassOverride", @"Method not supported. Derived class must override."); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.System.Security.Cryptography.Algorithms.SR); }
        }
    }
}
namespace FxResources.System.Security.Cryptography.Algorithms
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}
